AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Wild Rydes Full Infrastructure and CI/CD Pipeline
  Deploys a VPC with public subnets, an Application Load Balancer,
  ECS Fargate cluster/service for a dockerized application,
  and a CI/CD pipeline using CodeBuild, CodeDeploy, and CodePipeline.
  
Parameters:
  VpcCIDR:
    Description: "VPC CIDR block"
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Description: "CIDR for public subnet 1"
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Description: "CIDR for public subnet 2"
    Type: String
    Default: 10.0.2.0/24
  ContainerPort:
    Description: "Port on which the container listens"
    Type: Number
    Default: 80
  ImageRepositoryName:
    Description: "Name for the ECR repository"
    Type: String
    Default: wildrydes-app
  GitHubOwner:
    Description: "GitHub repository owner"
    Type: String
    Default: Julie0418
  GitHubRepoName:
    Description: "GitHub repository name"
    Type: String
    Default: khatoon-final
  GitHubBranch:
    Description: "Branch for CodePipeline"
    Type: String
    Default: main
  GitHubOAuthToken:
    Description: "GitHub OAuth token (store securely)"
    Type: String
    NoEcho: true
  CodeBuildServiceRoleARN:
    Description: "ARN for the IAM Role that CodeBuild will use"
    Type: String
    Default: arn:aws:iam::557690603426:role/service-role/codebuild-khatoon-flask-app-service-role
  CodeDeployServiceRoleARN:
    Description: "ARN for the IAM Role that CodeDeploy will use"
    Type: String
    Default: arn:aws:iam::557690603426:role/CodeDeployServiceRoleARN
  CodePipelineServiceRoleARN:
    Description: "ARN for the IAM Role that CodePipeline will use"
    Type: String
    Default: arn:aws:iam::557690603426:role/service-role/AWSCodePipelineServiceRole-ca-central-1-khatoon-codepipeline


Resources:

  ## VPC & Networking Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: WildRydes-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: WildRydes-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: WildRydes-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: WildRydes-PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WildRydes-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ## Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for the Application Load Balancer"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: WildRydes-ALB-SG

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for the ECS service tasks"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: WildRydes-ECS-SG

  ## Application Load Balancer and Listeners
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WildRydes-ALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: WildRydes-TG
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ## ECR Repository (for container images)
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-${AWS::AccountId}-wildrydes-app"

  ## ECS Cluster and Task Definition (Fargate)
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: WildRydes-ECS-Cluster

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Path: /

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: wildrydes-task
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      ContainerDefinitions:
        - Name: wildrydes-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageRepositoryName}:latest"
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Essential: true

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: WildRydes-Service
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 2
      TaskDefinition: !Ref ECSTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: wildrydes-container
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ALBTargetGroup

  ## CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: WildRydes-CodeBuild
      Description: "Build project for dockerized Wild Rydes application"
      Source:
        Type: CODEPIPELINE # Required for integration with CodePipeline
      Artifacts:
        Type: CODEPIPELINE # Required for integration with CodePipeline
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      ServiceRole: !Ref CodeBuildServiceRoleARN

  ## CodeDeploy Application & Deployment Group for ECS Blue/Green deployments
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: WildRydes-CodeDeploy-App
      ComputePlatform: ECS

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !Ref CodeDeployServiceRoleARN
      DeploymentType: BLUE_GREEN
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: BLUE_GREEN
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
          WaitTimeInMinutes: 0
        GreenFleetProvisioningOption:
          Action: DISCOVER_EXISTING
      ECSServices:
        - ClusterName: !Ref ECSCluster
          ServiceName: !Ref ECSService
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !GetAtt ALBTargetGroup.TargetGroupName
            ProdTrafficRoute:
              ListenerArns:
                - !Ref ALBListener

  ## S3 Bucket for CodePipeline artifacts
  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-codepipeline-artifacts"

  ## CodePipeline for full CI/CD workflow
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: WildRydes-CodePipeline
      RoleArn: !Ref CodePipelineServiceRoleARN
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepoName
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: "1"
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              RunOrder: 1

  ## CloudWatch Alarm monitoring CodeBuild failures
  CodeBuildFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CodeBuildFailureAlarm
      AlarmDescription: "Alarm if CodeBuild reports one or more failed builds."
      Namespace: AWS/CodeBuild
      MetricName: FailedBuilds
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ProjectName
          Value: !Ref CodeBuildProject

Outputs:
  LoadBalancerDNSName:
    Description: "The DNS name of the Application Load Balancer"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
  ECSClusterName:
    Description: "The name of the ECS cluster"
    Value: !Ref ECSCluster
  TaskDefinitionArn:
    Description: "ARN of the ECS Task Definition"
    Value: !GetAtt ECSTaskDefinition.TaskDefinitionArn
    Export:
      Name: TaskDefinitionArn